<?xml version="1.0" encoding="UTF-8"?>
<project name="common" default="all" xmlns:if="ant:if" xmlns:unless="ant:unless">
  <loadproperties srcFile="${user.home}/.config/DSL-OCD/test.config"/>

  <property name="temp" location="temp"/>
  <property name="temp.client" location="${temp}/client"/>
  <property name="temp.server" location="${temp}/server"/>
  <property name="temp.migration" location="${temp}/migration"/>

  <property name="dsl" location="../dsl"/>
  <property name="namespace" value="ocd"/>

  <property name="src" location="src"/>
  <property name="src.generated" location="${src}/generated"/>
  <property name="src.generated.java" location="${src.generated}/java"/>
  <property name="src.test" location="${src}/test"/>
  <property name="src.test.java" location="${src.test}/java"/>
  <property name="src.test.resources" location="${src.test}/resources"/>

  <property name="target" location="target"/>
  <property name="target.main" location="${target}/classes"/>
  <property name="target.test" location="${target}/test-classes"/>

  <property name="dsl-clc" value="dsl-clc-1.7.3-160822-132835.jar"/>
  <property name="dsl-compiler" value="dsl-compiler-1.5.6074.31170-160819-044013.exe"/>

  <property name="client" value="java_client"/>
  <property name="server" value="revenj.net"/>

  <property name="tools.test" location="${tools}/test"/>
  <property name="tools.build" location="${tools}/build"/>
  <property name="tools.config" location="${tools}/config"/>
  <property name="tools.compile" location="${tools}/compile"/>
  <property name="tools.runtime" location="${tools}/runtime"/>

  <property name="tools.dsl-clc" location="${tools.build}/${dsl-clc}"/>
  <property name="tools.dsl-compiler" location="${tools.build}/${dsl-compiler}"/>

  <property name="tools.ping" location="${tools.build}/dsl-ocd-util-ping-0.1.1.jar"/>

  <property name="workspace.client" location="${temp.client}/workspace"/>
  <property name="workspace.server" location="${temp.server}/workspace"/>
  <property name="workspace.migration" location="${temp.migration}/workspace"/>

  <property name="client.dependencies.template" location="${tools.compile}/${client}"/>
  <property name="server.dependencies.template" location="${tools.compile}/${server}"/>
  <property name="client.runtime.template" location="${tools.runtime}/${client}"/>
  <property name="server.runtime.template" location="${tools.runtime}/${server}"/>

  <property name="client.dependencies" location="${temp.client}/dependencies"/>
  <property name="server.dependencies" location="${temp.server}/dependencies"/>
  <property name="client.runtime" location="lib"/>
  <property name="server.runtime" location="server"/>

  <property name="client.config.name" value="dsl-project.properties"/>
  <property name="server.config.name" value="Revenj.Http.exe.config"/>
  <property name="client.config.template" location="${tools.config}/${client.config.name}.template"/>
  <property name="server.config.template" location="${tools.config}/${server.config.name}.template"/>
  <property name="client.config.runtime" location="${src.test.resources}/${client.config.name}"/>
  <property name="server.config.runtime" location="${server.runtime}/${server.config.name}"/>

  <property name="server.log" location="${server.runtime}/log"/>

  <property name="dbName" value="${projectShortName}"/>
  <property name="dbUser" value="${projectShortName}-user"/>
  <property name="dbPassword" value="${projectShortName}-password"/>

  <path id="postgres.classpath" location="${tools.build}/postgresql-9.4.1208.jre6.jar"/>

  <!-- ########### -->
  <!-- # FILTERS # -->
  <!-- ########### -->

  <filter token="dbHost" value="${dbHost}"/>
  <filter token="dbPort" value="${dbPort}"/>
  <filter token="dbName" value="${dbName}"/>
  <filter token="dbUser" value="${dbUser}"/>
  <filter token="dbPassword" value="${dbPassword}"/>

  <!-- ############### -->
  <!-- # JDK16 CHECK # -->
  <!-- ############### -->

  <property environment="env"/>
  <condition property="bootclasspath1" value="-bootclasspath" else="-g"><!-- find a better else="noop" variable, linux javac doesn't understand empty parameters -->
    <isset property="env.JDK16_HOME"/>
  </condition>
  <condition property="bootclasspath2" value="${env.JDK16_HOME}/jre/lib/rt.jar" else="-g"><!-- find a better else="noop" variable, linux javac doesn't understand empty parameters -->
    <isset property="env.JDK16_HOME"/>
  </condition>

  <!-- ############## -->
  <!-- # MISC SETUP # -->
  <!-- ############## -->

  <target name="clean" description="Performs a project clean, but does not delete generated tests">
    <delete dir="${temp}"/>
    <delete dir="${src.generated}"/>
    <delete dir="${target}"/>
    <delete dir="${server.runtime}"/>
  </target>

  <!-- ################## -->
  <!-- # DATABASE UTILS # -->
  <!-- ################## -->

  <target name="db-create" description="Creates a database and role for this project">
    <sql driver="org.postgresql.Driver" url="jdbc:postgresql://${dbHost}:${dbPort}/postgres" userid="${dbSuperUser}" password="${dbSuperPassword}" autocommit="true" onerror="continue">
      <classpath refid="postgres.classpath"/>
<![CDATA[
      CREATE ROLE "${dbUser}" PASSWORD '${dbPassword}' NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT LOGIN;
      CREATE DATABASE "${dbName}" OWNER "${dbUser}" ENCODING 'utf8' TEMPLATE template1;
]]>
    </sql>
  </target>

  <target name="db-drop" description="Terminates connections and then drops the database and role for this project">
    <sql driver="org.postgresql.Driver" url="jdbc:postgresql://${dbHost}:${dbPort}/postgres" userid="${dbSuperUser}" password="${dbSuperPassword}" autocommit="true" onerror="continue">
      <classpath refid="postgres.classpath"/>
<![CDATA[
      SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '${dbName}';
      DROP DATABASE IF EXISTS "${dbName}";
      DROP ROLE IF EXISTS "${dbUser}";
]]>
    </sql>
  </target>

  <!-- #################### -->
  <!-- # DATABASE MIGRATE # -->
  <!-- #################### -->

  <target name="db-migrate"
      description="Creates database migration and applies it">

    <delete dir="${temp.migration}"/>
    <mkdir dir="${workspace.migration}"/>

    <sql driver="org.postgresql.Driver" url="jdbc:postgresql://${dbHost}:${dbPort}/postgres" userid="${dbSuperUser}" password="${dbSuperPassword}" autocommit="true" onerror="continue">
      <classpath refid="postgres.classpath"/>
<![CDATA[
      ALTER USER "${dbUser}" WITH SUPERUSER;
]]>
    </sql>

    <echo>Creating and applying migration ...</echo>
    <java jar="${tools.dsl-clc}" fork="true" timeout="300000">
      <arg value="dsl=${dsl}"/>
      <arg value="compiler=${tools.dsl-compiler}"/>
      <arg value="temp=${workspace.migration}"/>
      <arg value="postgres=${dbHost}:${dbPort}/${dbName}?user=${dbUser}&amp;password=${dbPassword}"/>
      <arg value="sql=${temp.migration}"/>
      <arg value="force"/>
      <arg value="apply"/>
    </java>

    <sql driver="org.postgresql.Driver" url="jdbc:postgresql://${dbHost}:${dbPort}/postgres" userid="${dbSuperUser}" password="${dbSuperPassword}" autocommit="true" onerror="continue">
      <classpath refid="postgres.classpath"/>
<![CDATA[
      ALTER USER "${dbUser}" WITH NOSUPERUSER;
]]>
    </sql>
  </target>

  <!-- ################# -->
  <!-- # CREATE CLIENT # -->
  <!-- ################# -->

  <target name="client-dependencies-exist">
    <available file="${client.dependencies}" property="client.dependencies.present"/>
  </target>

  <target name="copy-client-dependencies" depends="client-dependencies-exist" unless="client.dependencies.present">
    <copy todir="${client.dependencies}">
      <fileset dir="${client.dependencies.template}"/>
    </copy>
  </target>

  <target name="client-create"
      description="Creates the client model sources"
      depends="copy-client-dependencies">
    <delete dir="${workspace.client}"/>
    <mkdir dir="${workspace.client}"/>

    <echo>Creating ${client} model sources ...</echo>
    <java jar="${tools.dsl-clc}" fork="true">
      <arg value="dsl=${dsl}"/>
      <arg value="compiler=${tools.dsl-compiler}"/>
      <arg value="${client}=${workspace.client}/client-model.jar"/>
      <arg value="dependencies:${client}=${client.dependencies}"/>
      <arg value="temp=${workspace.client}"/>
      <arg value="settings=${clientSettings}"/>
      <arg value="namespace=${namespace}"/>
      <arg value="source-only"/>
    </java>

    <delete dir="${src.generated.java}"/>
    <copy todir="${src.generated.java}/${namespace}">
      <fileset dir="${workspace.client}/JAVA_CLIENT/${namespace}"/>
    </copy>

    <copy file="${client.config.template}" toFile="${client.config.runtime}" overwrite="true" filtering="true"/>
  </target>

  <path id="client.compile.classpath">
    <fileset dir="${client.dependencies}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="client-compile" description="Compiles client sources">
    <delete dir="${target.main}"/>
    <mkdir dir="${target.main}"/>
    <javac srcdir="${src.generated.java}" destdir="${target.main}" fork="true" includeantruntime="false"
        deprecation="true"
        encoding="UTF-8"
        source="1.6"
        target="1.6">
      <classpath refid="client.compile.classpath"/>
      <compilerarg value="${bootclasspath1}"/>
      <compilerarg value="${bootclasspath2}"/>
    </javac>
  </target>

  <!-- ################# -->
  <!-- # CREATE SERVER # -->
  <!-- ################# -->

  <target name="server-dependencies-exist">
    <available file="${server.dependencies}" property="server.dependencies.present"/>
  </target>

  <target name="copy-server-dependencies" depends="server-dependencies-exist" unless="server.dependencies.present">
    <copy todir="${server.dependencies}">
      <fileset dir="${server.dependencies.template}"/>
    </copy>
  </target>

  <target name="server-create"
      description="Creates the server model library"
      depends="copy-server-dependencies">

    <delete dir="${server.runtime}"/>
    <delete dir="${workspace.server}"/>
    <mkdir dir="${workspace.server}"/>

    <echo>Creating ${server} model library ...</echo>
    <java jar="${tools.dsl-clc}" fork="true">
      <arg value="dsl=${dsl}"/>
      <arg value="compiler=${tools.dsl-compiler}"/>
      <arg value="${server}=${workspace.server}/server-model.dll"/>
      <arg value="dependencies:${server}=${server.dependencies}"/>
      <arg value="temp=${workspace.server}"/>
      <arg value="settings=${serverSettings}"/>
      <arg value="namespace=${namespace}"/>
    </java>

    <copy todir="${server.runtime}">
      <fileset dir="${server.runtime.template}"/>
    </copy>
    <move file="${workspace.server}/server-model.dll" todir="${server.runtime}/model"/>

    <copy file="${server.config.template}" toFile="${server.config.runtime}" overwrite="true" filtering="true"/>
  </target>

  <!-- ################ -->
  <!-- # SERVER UTILS # -->
  <!-- ################ -->

  <get-revenj-stop-port port="${serverPort}" result="revenj-stop-port"/>
  <get-revenj-stop-key host="${serverHost}" port="${serverPort}" result="revenj-stop-key"/>

  <target name="server-start" description="Starts the server">
    <exec executable="mono" spawn="true" osfamily="unix">
      <arg value="${server.runtime}/Revenj.Http.exe" />
    </exec>
    <exec executable="cmd.exe" spawn="false" osfamily="windows">
      <arg value="/C" />
      <arg value="START" />
      <arg value="/MIN" />
      <arg value="&quot;Revenj.NET-${revenj-stop-key}&quot;" />
      <arg value="${server.runtime}/Revenj.Http.exe" />
    </exec>
    <java jar="${tools.ping}" fork="true">
      <arg value="-t"/>
      <arg value="30000ms"/>
      <arg value="-i"/>
      <arg value="100ms"/>
      <arg value="http://${serverHost}:${serverPort}/ping"/>
    </java>
  </target>

  <target name="server-stop" description="Stops the running server">
    <exec executable="bash" osfamily="unix">
      <arg value="-c" />
      <arg value="ps aux | grep 'Revenj.Http.exe' | grep -v grep | awk '{print $2;}' | xargs kill -9 " />
    </exec>
    <exec executable="taskkill.exe" osfamily="windows">
      <arg value="/F" />
      <arg value="/T" />
      <arg value="/IM" />
      <arg value="Revenj.Http.exe" />
      <arg value="/FI" />
      <arg value="&quot;WINDOWTITLE eq Revenj.NET-${revenj-stop-key}&quot;" />
    </exec>
  </target>

  <!-- ######## -->
  <!-- # TEST # -->
  <!-- ######## -->

  <path id="test.compile.classpath">
    <fileset dir="${tools.test}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="test-compile" description="Compiles test sources">
    <delete dir="${target.test}"/>
    <mkdir dir="${target.test}"/>
    <javac srcdir="${src.test.java}" destdir="${target.test}" fork="true" includeantruntime="false"
        deprecation="true"
        encoding="UTF-8"
        source="1.6"
        target="1.6">
      <classpath refid="client.compile.classpath"/>
      <classpath location="${target.main}"/>
      <classpath refid="test.compile.classpath"/>
      <!--compilerarg value="-Xlint:all"/-->
      <compilerarg value="${bootclasspath1}"/>
      <compilerarg value="${bootclasspath2}"/>
    </javac>
    <copy todir="${target.test}">
      <fileset dir="${src.test.resources}"/>
    </copy>
  </target>

  <target name="test-run" description="Runs the generated JUnit test suite">
    <junit printsummary="on" fork="true" showoutput="true">
      <classpath refid="client.compile.classpath"/>
      <classpath refid="test.compile.classpath"/>
      <classpath location="${target.main}"/>
      <classpath location="${target.test}"/>
      <test name="${testName}">
        <formatter type="xml"/>
      </test>
    </junit>
  </target>

  <target name="test" description="Start the server, compiles and runs tests against it">
    <antcall target="client-compile"/>
    <antcall target="test-compile"/>
    <antcall target="server-start"/>
    <antcall target="test-run"/>
    <antcall target="server-stop"/>
  </target>

  <target name="all" description="Runs the full build and test suite">
    <antcall target="db-create"/>

    <antcall target="client-create"/>
    <antcall target="server-create"/>
    <antcall target="db-migrate"/>

    <antcall target="test"/>
  </target>

</project>
